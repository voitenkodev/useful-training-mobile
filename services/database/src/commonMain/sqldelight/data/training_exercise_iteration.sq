import kotlin.String;

CREATE TABLE IF NOT EXISTS Training (
    id TEXT NOT NULL PRIMARY KEY,
    duration INTEGER,
    createdAt INTEGER AS String,
    volume REAL,
    repetitions INTEGER,
    intensity REAL,
    updatedAt INTEGER AS String
);

CREATE TABLE IF NOT EXISTS Exercise (
    id TEXT NOT NULL PRIMARY KEY,
    trainingId TEXT NOT NULL REFERENCES Training(id) ON DELETE CASCADE,
    exerciseExampleId TEXT REFERENCES ExerciseExample(id),
    name TEXT,
    volume REAL,
    repetitions INTEGER,
    intensity REAL,
    createdAt TEXT,
    updatedAt TEXT
);

CREATE TABLE IF NOT EXISTS  Iteration (
    id TEXT NOT NULL PRIMARY KEY,
    exerciseId TEXT NOT NULL REFERENCES Exercise(id) ON DELETE CASCADE,
    weight REAL,
    repetitions INTEGER,
    createdAt TEXT,
    updatedAt TEXT
);

-------------- GET --------------

getTrainings:
SELECT
  Training.id,
  Training.createdAt,
  Training.updatedAt,
  Training.volume,
  Training.repetitions,
  Training.duration,
  Training.intensity,

  Exercise.id AS exerciseId,
  Exercise.name AS exerciseName,
  Exercise.volume AS exerciseVolume,
  Exercise.repetitions AS exerciseRepetitions,
  Exercise.intensity AS exerciseIntensity,
  Exercise.updatedAt AS exerciseUpdateAt,
  Exercise.createdAt AS exerciseCreatedAt,

  ExerciseExample.id AS exerciseExampleId,
  ExerciseExample.name AS exerciseExampleName,
  ExerciseExample.description AS exerciseExampleDescription,
  ExerciseExample.imageUrl AS exerciseExampleImageUrl,
  ExerciseExample.createdAt AS exerciseExampleCreatedAt,
  ExerciseExample.updatedAt AS exerciseExampleUpdatedAt,

  Muscle.id AS muscleId,
  Muscle.name AS muscleName,

  Iteration.id AS iterationId,
  Iteration.weight AS iterationWeight,
  Iteration.repetitions AS iterationRepetitions,
  Iteration.updatedAt AS iterationUpdateAt,
  Iteration.createdAt AS iterationCreatedAt

FROM Training
LEFT JOIN Exercise ON Training.id = Exercise.trainingId
LEFT JOIN ExerciseExample ON Exercise.exerciseExampleId = ExerciseExample.id
LEFT JOIN MuscleExerciseBundle ON ExerciseExample.id = MuscleExerciseBundle.exerciseExampleId
LEFT JOIN Muscle ON MuscleExerciseBundle.muscleId = Muscle.id
LEFT JOIN Iteration ON Exercise.id = Iteration.exerciseId
WHERE Training.createdAt BETWEEN ? AND ?
ORDER BY Training.id DESC;

getTrainingById:
SELECT
  Training.id,
  Training.createdAt,
  Training.updatedAt,
  Training.volume,
  Training.repetitions,
  Training.duration,
  Training.intensity,

  Exercise.id AS exerciseId,
  Exercise.name AS exerciseName,
  Exercise.volume AS exerciseVolume,
  Exercise.repetitions AS exerciseRepetitions,
  Exercise.intensity AS exerciseIntensity,
  Exercise.updatedAt AS exerciseUpdateAt,
  Exercise.createdAt AS exerciseCreatedAt,

  ExerciseExample.id AS exerciseExampleId,
  ExerciseExample.name AS exerciseExampleName,
  ExerciseExample.description AS exerciseExampleDescription,
  ExerciseExample.imageUrl AS exerciseExampleImageUrl,
  ExerciseExample.createdAt AS exerciseExampleCreatedAt,
  ExerciseExample.updatedAt AS exerciseExampleUpdatedAt,

  Muscle.id AS muscleId,
  Muscle.name AS muscleName,

  Iteration.id AS iterationId,
  Iteration.weight AS iterationWeight,
  Iteration.repetitions AS iterationRepetitions,
  Iteration.updatedAt AS iterationUpdateAt,
  Iteration.createdAt AS iterationCreatedAt

FROM Training
LEFT JOIN Exercise ON Training.id = Exercise.trainingId
LEFT JOIN ExerciseExample ON Exercise.exerciseExampleId = ExerciseExample.id
LEFT JOIN MuscleExerciseBundle ON ExerciseExample.id = MuscleExerciseBundle.exerciseExampleId
LEFT JOIN Muscle ON MuscleExerciseBundle.muscleId = Muscle.id
LEFT JOIN Iteration ON Exercise.id = Iteration.exerciseId
WHERE Training.id = ?
ORDER BY Training.createdAt DESC
LIMIT 1;

-------------- SET --------------

setTraining:
INSERT OR REPLACE INTO Training
VALUES (?,?,?,?,?,?,?);

setExercise:
INSERT OR REPLACE INTO Exercise (id,trainingId,exerciseExampleId,name,volume,repetitions,intensity, createdAt, updatedAt)
VALUES (?,?,?,?,?,?,?,?,?);

setIteration:
INSERT OR REPLACE INTO Iteration (id,exerciseId,weight,repetitions,createdAt, updatedAt)
VALUES (?,?,?,?,?,?);

-------------- DELETE --------------

deleteTableTraining:
DELETE FROM Training;

deleteTrainingById:
DELETE FROM Training
WHERE id = ?;